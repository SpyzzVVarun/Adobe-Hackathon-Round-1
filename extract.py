# Adobe PDF Extract SDK Imports
from adobe.pdfservices.operation.auth.credentials import Credentials
from adobe.pdfservices.operation.exception.exceptions import ServiceApiException, ServiceUsageException, SdkException
from adobe.pdfservices.operation.execution_context import ExecutionContext
from adobe.pdfservices.operation.io.file_ref import FileRef
from adobe.pdfservices.operation.pdfops.extract_pdf_operation import ExtractPDFOperation
from adobe.pdfservices.operation.pdfops.options.extractpdf.extract_pdf_options import ExtractPDFOptions
from adobe.pdfservices.operation.pdfops.options.extractpdf.extract_element_type import ExtractElementType

# Basic Imports
import os
import zipfile
import json
import re
import pandas as pd
from thefuzz import process # String Matching Library

def solve(TestDataSet = "InvoicesData/InvoicesData/TestDataSet/", 
        SampleOutput = "InvoicesData/InvoicesData/sampleInvoicesAndData/ExtractedData/ExtractedData.csv",
        OutputDir = 'InvoicesData/TestOutput/'):
    """Function that generates the final output for all the test pdfs.

    All the output csvs are stored in the OutputDir.

    Parameters
    ----------
    TestDataSet : Path to the directory 
                    containing the test pdfs.

    SampleOutput : Path to the csv 
                     that contains the data in the expected output format.

    OutputDir : Path to the directory 
                    where the output is stored.

    """
    # List of names of all the test pdfs
    test = [pdf for pdf in os.listdir(TestDataSet) if "pdf" in pdf]
    for pdf in test: 
        # Extracting the dict using the PDF Extract API
        jsonData = extractTextFromPDF(TestDataSet + pdf)
        # Parsing the dictionary
        record = parseJSON(jsonData)
        df = pd.DataFrame(record)
        df = df.reindex(columns=pd.read_csv(SampleOutput).columns)
        df.to_csv(OutputDir + pdf.split('.')[0] + '.csv', index = False)


def extractTextFromPDF(input_pdf):
    """Function that uses Adobe's PDF Extract API to get invoice text in structured JSON format.

    The PDF Extract API (included with the PDF Services API) is a cloud-based web service 
    that uses Adobe's Sensei AI technology to automatically extract content and structural 
    information from PDF documents - native or scanned - and to output it in a structured JSON format. 

    Parameters
    ----------
    input_pdf : Path to the PDF 
                    for which the structuredJson file has to be generated.

    Returns
    -------
    data : dictionary
                containing the data from the structuredJson file generated by the PDF Extract API.
    """

    # This defines what our output ZIP will be
    zip_file = "./ExtractTextInfoFromPDF.zip"

    # and optionally deletes it if it already exists.
    if os.path.isfile(zip_file):
        os.remove(zip_file)

    #Initial setup, create credentials instance.
    credentials = Credentials.service_account_credentials_builder()\
        .from_file("./pdfservices-api-credentials.json") \
        .build()

    #Create an ExecutionContext using credentials and create a new operation instance.
    execution_context = ExecutionContext.create(credentials)

    extract_pdf_operation = ExtractPDFOperation.create_new()

    #Set operation input from a source file.
    source = FileRef.create_from_local_file(input_pdf)
    extract_pdf_operation.set_input(source)

    #Build ExtractPDF options and set them into the operation
    extract_pdf_options: ExtractPDFOptions = ExtractPDFOptions.builder() \
        .with_element_to_extract(ExtractElementType.TEXT) \
        .build()
    extract_pdf_operation.set_options(extract_pdf_options)

    #Execute the operation.
    result: FileRef = extract_pdf_operation.execute(execution_context)

    #Save the result to the specified location.
    result.save_as(zip_file)

    #reading in the ZIP file, extracting the JSON result file, and returning the dictionary
    archive = zipfile.ZipFile(zip_file, 'r')
    jsonentry = archive.open('structuredData.json')
    jsondata = jsonentry.read()
    data = json.loads(jsondata)

    return data

def parseJSON(data):
    """Function that generates a dictionary to structure the json data in the expected output format.

    Parameters
    ----------
    data : dictionary 
              containing the data from the structuredJson file generated by the PDF Extract API.

    Returns
    -------
    records : dictionary
                containing the data from the structuredJson file extracted in the output format.
    """
    text = ""
    newline_text = ""
    text2path = dict()
    for element in data["elements"]:
        if(element["Path"].startswith("//Document/Sect")):
            try:
                text += element['Text'] + " "
                newline_text += element['Text'] + "\n"
                text2path[element['Text'].strip()] = element['Path']
            except:
                pass
    records = dict()
    extractBussinessDetails(records, text)
    extractCustomerDetails(records, text, newline_text, text2path)
    extractInvoiceBillDetails(records, text)
    return records

def extractBussinessDetails(records, text):
    """Function that extracts the Bussiness details in the invoice.

    This function extracts the Bussiness__Name, Bussiness__Zipcode, Bussiness__City, 
    Bussiness__StreetAddress, Bussiness__Country and Bussiness__Description.
    All this information is availabe in the invoice headers.

    Parameters
    ----------
    records : Dictionary 
                where the output data is stored.

    text : String
            containing the relevant invoice text in a single space separated string.

    """

    # Extracts the Bussiness Name availabe at the top of the invoice or in the "Title" path
    pattern = r'^([^0-9]*)'
    match = re.match(pattern, text)
    if match:
        records['Bussiness__Name'] = match.group(1).strip()
    
    # Extracts the Bussiness Zipcode, also avalible in the invoice header section
    pattern = r'(?:[^0-9]*([0-9]+)){2}'
    match = re.search(pattern, text)
    if match:
        records['Bussiness__Zipcode'] = match.group(1).strip()
    
    # Extracts the Bussiness Location details, taking text between Zipcode and Name and make splits based on ',' 
    records['Bussiness__City'] = text.split(records['Bussiness__Zipcode'])[0].split(records['Bussiness__Name'])[1].split(", ")[1].strip()
    records['Bussiness__StreetAddress'] = text.split(records['Bussiness__Zipcode'])[0].split(records['Bussiness__Name'])[1].split(", ")[0].strip()
    records['Bussiness__Country'] = ", ".join(text.split(records['Bussiness__Zipcode'])[0].split(records['Bussiness__Name'])[1].split(", ")[2:]).strip()

    # Extracts the Bussiness Description
    records['Bussiness__Description'] = text.split(records['Bussiness__Name'])[2].split("BILL TO")[0].strip()



def extractCustomerDetails(records, text, newline_text, text2path):
    """Function that extracts the Customer details in the invoice.

    This function extracts the Customer__PhoneNumber, Customer__Address__line1, 
    Customer__Address__line2, Invoice__Description, Customer__Name and Customer__Email.
    All this information is availabe in some tabular format below the invoice headers.

    Parameters
    ----------
    records : Dictionary 
                where the output data is stored.

    text : String
            containing the relevant invoice text in a single space separated string.
    
    newline_text : String
            containing the relevant invoice text in a single nelwine separated string.
    
    text2path : Dictionary 
                where the text-path pairs are stored.

    """

    # Trying to split the customer details section into 2 parts based on 3 invoice headers
    customer_details_part1 = text.split("BILL TO")[1].split("DETAILS")[0].strip()
    customer_details_part2 = text.split("DETAILS")[1].split("PAYMENT")[0].strip()

    # If the standard format is not followed (both earlier splits empty)
    if(not customer_details_part1.strip() and not customer_details_part2.strip()):
        temp = newline_text.split("PAYMENT")[1].split("Due date")[0]
        pattern = r'\d{3}-\d{3}-\d{4}'
        match = re.findall(pattern, temp)
        if match:
            match = match[0]
            records['Customer__PhoneNumber'] = match
            temp = temp.split(match)
            temp[0] = temp[0].replace("\n", " ")
            temp[1] = temp[1][1:-1].strip().split("\n")
            # remember to do this for elif and else as well
            if(len(temp[1]) > 2):
                records['Customer__Address__line1'] = temp[1][0]
                records['Customer__Address__line2'] = temp[1][1]
                temp[1][2] = " ".join(temp[1][2:])
                records['Invoice__Description'] = temp[1][2]
            else:
                records['Customer__Address__line1'] = temp[1][0]
                records['Customer__Address__line2'] = ""
                records['Invoice__Description'] = temp[1][1]
            pattern = r'\b\w+[\w.]*\w+@\w+[\w.]*\w+\b'
            match = re.findall(pattern, temp[0])[0]
            records['Customer__Name'] = temp[0].split(match)[0].strip()
            records['Customer__Email'] = match + temp[0].split(match)[1].replace(" ", "")
        else:
            temp = newline_text.split("PAYMENT")[1].split("ITEM")[0]
            number = re.findall(r'\d{3}-\d{3}-\d{4}', temp)[0]
            records['Customer__PhoneNumber'] = number
            email = re.findall(r'\b\w+[\w.]*\w+@\w+[\w.]*\w+\b', temp)[0]
            records['Customer__Email'] = email
            name = process.extract(email, temp.split("\n"))[1][0]
            records['Customer__Name'] = name
            date = temp.split("Due date: ")[1].split("\n")[0]
            amount = re.findall(r"\$\d+(?:\.\d{1,2})?", temp)[0]
            found = [number, email, name, "Due date: " + date, amount]
            found = [word.strip() for word in found]
            words = [word.strip() for word in temp.split('\n') if word.strip()]
            print(words)
            words = [word for word in words if word not in "".join(found)]
            print(words)
            print(text2path.keys())
            records['Invoice__Description'] = ''
            count = 0
            for word in words:
                if(word in text2path.keys() and 'TD[2]' in text2path[word.strip()]):
                    records['Invoice__Description'] += word.strip() + ' '
                elif(count == 0):
                    count += 1
                    records['Customer__Address__line1'] = word.strip()
                elif(count == 1):
                    count += 1
                    records['Customer__Address__line2'] = word.strip()
            records['Invoice__Description'] = records['Invoice__Description'].strip()


    # Non standard format with partial information available in the 2 sections
    elif(customer_details_part1.strip() and not customer_details_part2.strip()):
        pattern = r'\d{3}-\d{3}-\d{4}'
        match = re.findall(pattern, customer_details_part1)
        if match:
            records['Customer__PhoneNumber'] = match[0]
        pattern = r'\b\w+[\w.]*\w+@\w+[\w.]*\w+\b'
        customer_details_part1_1 = customer_details_part1.split(records['Customer__PhoneNumber'])[0]
        match = re.findall(pattern, customer_details_part1_1)
        if match:
            records['Customer__Name'] = customer_details_part1_1.split(match[0])[0].strip()
            records['Customer__Email'] = match[0] + customer_details_part1_1.split(match[0])[1].replace(" ", "")
        customer_details_part1_2 = customer_details_part1.split(records['Customer__PhoneNumber'])[1]
        records['Customer__Address__line1'] = customer_details_part1_2.strip().split("  ")[0]
        records['Customer__Address__line2'] = customer_details_part1_2.strip().split("  ")[1]
        records['Invoice__Description'] = text.split("PAYMENT")[1].split('Due date')[0].strip()
        
    # If standard format is followed and all customer details are present in the 2 sections
    else:
        pattern = r'\d{3}-\d{3}-\d{4}'
        match = re.findall(pattern, customer_details_part1)
        if match:
            records['Customer__PhoneNumber'] = match[0]
        pattern = r'\b\w+[\w.]*\w+@\w+[\w.]*\w+\b'
        customer_details_part1_1 = customer_details_part1.split(records['Customer__PhoneNumber'])[0]
        match = re.findall(pattern, customer_details_part1_1)
        if match:
            records['Customer__Name'] = customer_details_part1_1.split(match[0])[0].strip()
            records['Customer__Email'] = match[0] + customer_details_part1_1.split(match[0])[1].replace(" ", "")
        customer_details_part1_2 = customer_details_part1.split(records['Customer__PhoneNumber'])[1]
        records['Customer__Address__line1'] = customer_details_part1_2.strip().split("  ")[0]
        records['Customer__Address__line2'] = customer_details_part1_2.strip().split("  ")[1]
        records['Invoice__Description'] = customer_details_part2.strip()
    
    # If there is only one line of Customer Address, making sure that it is stored in the first line.
    if(not records['Customer__Address__line1'] and records['Customer__Address__line2']):
        records['Customer__Address__line1'] = records['Customer__Address__line2']
        records['Customer__Address__line2'] = " "

def extractInvoiceBillDetails(records, text):
    """Function that extracts the Invoice Bill details.

    This function extracts the Invoice__Number, Invoice__Tax, Invoice__IssueDate, Invoice__DueDate,
    Invoice__BillDetails__Name, Invoice__BillDetails__Quantity and Invoice__BillDetails__Rate.

    Parameters
    ----------
    records : Dictionary 
                where the output data is stored.

    text : String
            containing the relevant invoice text in a single space separated string.

    """
    records['Invoice__Number'] = text.split("Invoice#")[1].strip().split(" ")[0]
    records['Invoice__Tax'] = text.strip().split()[-4]

    records['Invoice__IssueDate'] = text.split("Issue date")[1].strip().split(" ")[0]
    records['Invoice__DueDate'] = text.split("Due date:")[1].strip().split(" ")[0]

    records['Invoice__BillDetails__Name'] = list()
    records['Invoice__BillDetails__Quantity'] = list()
    records['Invoice__BillDetails__Rate'] = list()

    amount_pattern = r'(?<=AMOUNT\s+).*?(?=\s+Subtotal)'
    word_number_pattern = r'(.*?)\s+(\d+)\s+(\d+)\s+\$(\d+)'

    # Extract text between "AMOUNT" and "Subtotal"
    amount_text = text.split("AMOUNT")[1].split("Subtotal")[0]

    # Extract separate patterns of a word followed by three numbers
    matches = re.findall(word_number_pattern, amount_text)
    result = [(match[0], match[1], match[2]) for match in matches]
    for item in result:
        records['Invoice__BillDetails__Name'].append(item[0].strip())
        records['Invoice__BillDetails__Quantity'].append(item[1].strip())
        records['Invoice__BillDetails__Rate'].append(item[2].strip())



# Calling the Main function
if __name__ == '__main__':
    solve()